{"ast":null,"code":"var _jsxFileName = \"D:\\\\myprojecct\\\\B2B3\\\\frontend\\\\src\\\\pages\\\\getallPosts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Box, Typography, Card, CardContent, Grid, CircularProgress, useTheme } from \"@mui/material\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostDashboard = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [page, setPage] = useState(1);\n  const theme = useTheme();\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/getmyposts`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}` // Use appropriate token handling\n        }\n      });\n      const fetchedPosts = response.data.posts; // Access posts array\n\n      if (fetchedPosts.length === 0) {\n        setHasMore(false);\n      } else {\n        setPosts(prevPosts => [...prevPosts, ...fetchedPosts]);\n        setPage(prevPage => prevPage + 1);\n      }\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: theme.palette.mode === \"dark\" ? \"#121212\" : \"#f5f5f5\",\n      minHeight: \"100vh\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      align: \"center\",\n      gutterBottom: true,\n      sx: {\n        color: theme.palette.mode === \"dark\" ? \"#fff\" : \"#000\"\n      },\n      children: \"Posts Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: posts.length,\n      next: fetchPosts,\n      hasMore: hasMore,\n      loader: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: \"center\",\n          marginTop: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this),\n      endMessage: /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        sx: {\n          marginTop: 2\n        },\n        children: \"No more posts to show.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          lg: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              backgroundColor: theme.palette.mode === \"dark\" ? \"#1e1e1e\" : \"#fff\",\n              color: theme.palette.mode === \"dark\" ? \"#fff\" : \"#000\"\n            },\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: post.shopName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: [\"Deadline: \", new Date(post.deadline).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                children: \"Items:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: post.items.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [item.name, \" - \", item.quantity]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)\n        }, post._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(PostDashboard, \"/S2nOxRtjK7LrZMHg6jLlDwOWsY=\", false, function () {\n  return [useTheme];\n});\n_c = PostDashboard;\nexport default PostDashboard;\nvar _c;\n$RefreshReg$(_c, \"PostDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","Box","Typography","Card","CardContent","Grid","CircularProgress","useTheme","InfiniteScroll","jsxDEV","_jsxDEV","PostDashboard","_s","posts","setPosts","hasMore","setHasMore","page","setPage","theme","fetchPosts","response","get","headers","Authorization","localStorage","getItem","fetchedPosts","data","length","prevPosts","prevPage","error","console","sx","backgroundColor","palette","mode","minHeight","padding","children","variant","align","gutterBottom","color","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","next","loader","textAlign","marginTop","endMessage","container","spacing","map","post","item","xs","md","lg","shopName","Date","deadline","toLocaleDateString","items","index","name","quantity","_id","_c","$RefreshReg$"],"sources":["D:/myprojecct/B2B3/frontend/src/pages/getallPosts.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  CircularProgress,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst PostDashboard = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [page, setPage] = useState(1);\r\n  const theme = useTheme();\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:5000/api/getmyposts`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // Use appropriate token handling\r\n          },\r\n        }\r\n      );\r\n  \r\n      const fetchedPosts = response.data.posts; // Access posts array\r\n  \r\n      if (fetchedPosts.length === 0) {\r\n        setHasMore(false);\r\n      } else {\r\n        setPosts((prevPosts) => [...prevPosts, ...fetchedPosts]);\r\n        setPage((prevPage) => prevPage + 1);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching posts:\", error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: theme.palette.mode === \"dark\" ? \"#121212\" : \"#f5f5f5\",\r\n        minHeight: \"100vh\",\r\n        padding: \"20px\",\r\n      }}\r\n    >\r\n      <Typography\r\n        variant=\"h4\"\r\n        align=\"center\"\r\n        gutterBottom\r\n        sx={{\r\n          color: theme.palette.mode === \"dark\" ? \"#fff\" : \"#000\",\r\n        }}\r\n      >\r\n        Posts Dashboard\r\n      </Typography>\r\n      <InfiniteScroll\r\n        dataLength={posts.length}\r\n        next={fetchPosts}\r\n        hasMore={hasMore}\r\n        loader={\r\n          <Box sx={{ textAlign: \"center\", marginTop: 2 }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        }\r\n        endMessage={\r\n          <Typography align=\"center\" sx={{ marginTop: 2 }}>\r\n            No more posts to show.\r\n          </Typography>\r\n        }\r\n      >\r\n        <Grid container spacing={3}>\r\n          {posts.map((post) => (\r\n            <Grid item xs={12} md={6} lg={4} key={post._id}>\r\n              <Card\r\n                sx={{\r\n                  backgroundColor:\r\n                    theme.palette.mode === \"dark\" ? \"#1e1e1e\" : \"#fff\",\r\n                  color: theme.palette.mode === \"dark\" ? \"#fff\" : \"#000\",\r\n                }}\r\n              >\r\n                <CardContent>\r\n                  <Typography variant=\"h6\">{post.shopName}</Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    Deadline: {new Date(post.deadline).toLocaleDateString()}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\">Items:</Typography>\r\n                  <ul>\r\n                    {post.items.map((item, index) => (\r\n                      <li key={index}>\r\n                        {item.name} - {item.quantity}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </InfiniteScroll>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PostDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}